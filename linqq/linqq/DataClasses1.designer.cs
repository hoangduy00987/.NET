#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace linqq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLSV")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSV(SV instance);
    partial void UpdateSV(SV instance);
    partial void DeleteSV(SV instance);
    partial void InsertLSH(LSH instance);
    partial void UpdateLSH(LSH instance);
    partial void DeleteLSH(LSH instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::linqq.Properties.Settings.Default.QLSVConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SV> SVs
		{
			get
			{
				return this.GetTable<SV>();
			}
		}
		
		public System.Data.Linq.Table<LSH> LSHes
		{
			get
			{
				return this.GetTable<LSH>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SV")]
	public partial class SV : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MSSV;
		
		private double _DTB;
		
		private string _TENSV;
		
		private System.DateTime _NGAYSINH;
		
		private string _TENLOP;
		
		private int _ID_LOP;
		
		private bool _GENDER;
		
		private bool _ANH;
		
		private bool _CCCD;
		
		private bool _HOSO;
		
		private EntityRef<LSH> _LSH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMSSVChanging(string value);
    partial void OnMSSVChanged();
    partial void OnDTBChanging(double value);
    partial void OnDTBChanged();
    partial void OnTENSVChanging(string value);
    partial void OnTENSVChanged();
    partial void OnNGAYSINHChanging(System.DateTime value);
    partial void OnNGAYSINHChanged();
    partial void OnTENLOPChanging(string value);
    partial void OnTENLOPChanged();
    partial void OnID_LOPChanging(int value);
    partial void OnID_LOPChanged();
    partial void OnGENDERChanging(bool value);
    partial void OnGENDERChanged();
    partial void OnANHChanging(bool value);
    partial void OnANHChanged();
    partial void OnCCCDChanging(bool value);
    partial void OnCCCDChanged();
    partial void OnHOSOChanging(bool value);
    partial void OnHOSOChanged();
    #endregion
		
		public SV()
		{
			this._LSH = default(EntityRef<LSH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSSV", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MSSV
		{
			get
			{
				return this._MSSV;
			}
			set
			{
				if ((this._MSSV != value))
				{
					this.OnMSSVChanging(value);
					this.SendPropertyChanging();
					this._MSSV = value;
					this.SendPropertyChanged("MSSV");
					this.OnMSSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DTB", DbType="Float NOT NULL")]
		public double DTB
		{
			get
			{
				return this._DTB;
			}
			set
			{
				if ((this._DTB != value))
				{
					this.OnDTBChanging(value);
					this.SendPropertyChanging();
					this._DTB = value;
					this.SendPropertyChanged("DTB");
					this.OnDTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENSV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TENSV
		{
			get
			{
				return this._TENSV;
			}
			set
			{
				if ((this._TENSV != value))
				{
					this.OnTENSVChanging(value);
					this.SendPropertyChanging();
					this._TENSV = value;
					this.SendPropertyChanged("TENSV");
					this.OnTENSVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NGAYSINH", DbType="DateTime NOT NULL")]
		public System.DateTime NGAYSINH
		{
			get
			{
				return this._NGAYSINH;
			}
			set
			{
				if ((this._NGAYSINH != value))
				{
					this.OnNGAYSINHChanging(value);
					this.SendPropertyChanging();
					this._NGAYSINH = value;
					this.SendPropertyChanged("NGAYSINH");
					this.OnNGAYSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOP", DbType="Char(15) NOT NULL", CanBeNull=false)]
		public string TENLOP
		{
			get
			{
				return this._TENLOP;
			}
			set
			{
				if ((this._TENLOP != value))
				{
					this.OnTENLOPChanging(value);
					this.SendPropertyChanging();
					this._TENLOP = value;
					this.SendPropertyChanged("TENLOP");
					this.OnTENLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LOP", DbType="Int NOT NULL")]
		public int ID_LOP
		{
			get
			{
				return this._ID_LOP;
			}
			set
			{
				if ((this._ID_LOP != value))
				{
					if (this._LSH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_LOPChanging(value);
					this.SendPropertyChanging();
					this._ID_LOP = value;
					this.SendPropertyChanged("ID_LOP");
					this.OnID_LOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENDER", DbType="Bit NOT NULL")]
		public bool GENDER
		{
			get
			{
				return this._GENDER;
			}
			set
			{
				if ((this._GENDER != value))
				{
					this.OnGENDERChanging(value);
					this.SendPropertyChanging();
					this._GENDER = value;
					this.SendPropertyChanged("GENDER");
					this.OnGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANH", DbType="Bit NOT NULL")]
		public bool ANH
		{
			get
			{
				return this._ANH;
			}
			set
			{
				if ((this._ANH != value))
				{
					this.OnANHChanging(value);
					this.SendPropertyChanging();
					this._ANH = value;
					this.SendPropertyChanged("ANH");
					this.OnANHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CCCD", DbType="Bit NOT NULL")]
		public bool CCCD
		{
			get
			{
				return this._CCCD;
			}
			set
			{
				if ((this._CCCD != value))
				{
					this.OnCCCDChanging(value);
					this.SendPropertyChanging();
					this._CCCD = value;
					this.SendPropertyChanged("CCCD");
					this.OnCCCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOSO", DbType="Bit NOT NULL")]
		public bool HOSO
		{
			get
			{
				return this._HOSO;
			}
			set
			{
				if ((this._HOSO != value))
				{
					this.OnHOSOChanging(value);
					this.SendPropertyChanging();
					this._HOSO = value;
					this.SendPropertyChanged("HOSO");
					this.OnHOSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LSH_SV", Storage="_LSH", ThisKey="ID_LOP", OtherKey="ID_LOP", IsForeignKey=true)]
		public LSH LSH
		{
			get
			{
				return this._LSH.Entity;
			}
			set
			{
				LSH previousValue = this._LSH.Entity;
				if (((previousValue != value) 
							|| (this._LSH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LSH.Entity = null;
						previousValue.SVs.Remove(this);
					}
					this._LSH.Entity = value;
					if ((value != null))
					{
						value.SVs.Add(this);
						this._ID_LOP = value.ID_LOP;
					}
					else
					{
						this._ID_LOP = default(int);
					}
					this.SendPropertyChanged("LSH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LSH")]
	public partial class LSH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_LOP;
		
		private string _NameLop;
		
		private EntitySet<SV> _SVs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_LOPChanging(int value);
    partial void OnID_LOPChanged();
    partial void OnNameLopChanging(string value);
    partial void OnNameLopChanged();
    #endregion
		
		public LSH()
		{
			this._SVs = new EntitySet<SV>(new Action<SV>(this.attach_SVs), new Action<SV>(this.detach_SVs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_LOP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_LOP
		{
			get
			{
				return this._ID_LOP;
			}
			set
			{
				if ((this._ID_LOP != value))
				{
					this.OnID_LOPChanging(value);
					this.SendPropertyChanging();
					this._ID_LOP = value;
					this.SendPropertyChanged("ID_LOP");
					this.OnID_LOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameLop", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NameLop
		{
			get
			{
				return this._NameLop;
			}
			set
			{
				if ((this._NameLop != value))
				{
					this.OnNameLopChanging(value);
					this.SendPropertyChanging();
					this._NameLop = value;
					this.SendPropertyChanged("NameLop");
					this.OnNameLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LSH_SV", Storage="_SVs", ThisKey="ID_LOP", OtherKey="ID_LOP")]
		public EntitySet<SV> SVs
		{
			get
			{
				return this._SVs;
			}
			set
			{
				this._SVs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.LSH = this;
		}
		
		private void detach_SVs(SV entity)
		{
			this.SendPropertyChanging();
			entity.LSH = null;
		}
	}
}
#pragma warning restore 1591
